{"version":3,"sources":["../../netflix-clone/src/api/axios.ts","../../netflix-clone/src/api/requests.ts","../../netflix-clone/src/Component/Banner/Banner.tsx","../../netflix-clone/src/Component/Nav/Nav.tsx","../../netflix-clone/src/Component/Row/Row.tsx","../../netflix-clone/src/App.tsx","../../netflix-clone/src/reportWebVitals.ts","../../netflix-clone/src/index.tsx"],"names":["instance","axios","create","baseURL","API_KEY","requests","fetchTrending","concat","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","_useState","useState","_useState2","Object","slicedToArray","movie","setMovie","useEffect","_fetchData","asyncToGenerator","_regeneratorRuntime","mark","_callee","request","wrap","_context","prev","next","get","sent","data","results","Math","floor","random","length","abrupt","stop","apply","this","arguments","fetchData","react_default","a","createElement","className","style","backgroundSize","backgroundImage","backdrop_path","poster_path","backgroundPosition","original_name","name","title","original_title","str","n","substr","truncate","overview","Nav","show","setShow","handleShow","window","scrollY","addEventListener","removeEventListener","src","alt","Row","_ref","fetchUrl","isLargeRow","movies","setMovies","_useState3","_useState4","trailerUrl","setTrailerUrl","Row_regeneratorRuntime","handleClick","_ref2","_callee2","movieDate","movieName","_context2","first_air_date","release_date","console","log","Number","slice","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","catch","err","_x","map","m","key","id","onClick","YouTube","videoId","opts","height","width","playerVars","autoplay","App","Nav_Nav_Nav","Banner_Banner_Banner","Component_Row_Row","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.6bef953f.chunk.js","sourcesContent":["\r\nimport axios from \"axios\"\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://api.themoviedb.org/3',\r\n})\r\n\r\n\r\nexport default instance","const API_KEY = \"e8d79a622e4368a0ed8c76c47156be01\"\r\n\r\n//https://api.themoviedb.org/3/movie/550?api_key=e8d79a622e4368a0ed8c76c47156be01\r\n\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\n\r\n\r\nexport default requests","import React, { useEffect, useState } from 'react'\r\nimport axios from '../../api/axios';\r\nimport requests from '../../api/requests';\r\nimport { MovieType } from '../../api/types';\r\nimport './Banner.css';\r\n\r\n\r\nexport const Banner = () => {\r\n\r\n    const [movie, setMovie] = useState<MovieType>({} as MovieType)\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(requests.fetchNetflixOriginals)\r\n            setMovie(\r\n                request.data.results[\r\n                Math.floor(Math.random() * request.data.results.length - 1)\r\n                ]\r\n            )\r\n            return request\r\n        }\r\n        fetchData()\r\n    }, [requests]);\r\n\r\n\r\n    const truncate = (str: any, n: number) => {\r\n        if (str)\r\n            return str.length > n ? str.substr(0, n - 1) + '...' : str\r\n    }\r\n\r\n\r\n    return (\r\n        <header className=\"banner\"\r\n            style={{\r\n                backgroundSize: 'cover',\r\n                backgroundImage: `url(\r\n                    'https://image.tmdb.org/t/p/original/${movie.backdrop_path || movie.poster_path}'\r\n                )`,\r\n                backgroundPosition: 'center center'\r\n            }}\r\n        >\r\n            <div className=\"banner__contents\">\r\n\r\n                <h1 className=\"banner__title\">\r\n                    {movie.original_name || movie.name || movie.title || movie.original_title}\r\n                </h1>\r\n                <div className=\"banner__buttons\">\r\n                    <button className=\"banner__button\">  Play </button>\r\n                    <button className=\"banner__button\"> My List </button>\r\n                </div>\r\n\r\n                <h1 className=\"banner__description\">\r\n                    {truncate(movie.overview, 150)}\r\n                </h1>\r\n            </div>\r\n            <div className='banner__fadeBotton' />\r\n        </header>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n//Express \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useEffect, useState } from 'react'\r\nimport './Nav.css';\r\n\r\n\r\nexport const Nav = () => {\r\n\r\n    const [show, setShow] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const handleShow = () => {\r\n            if (window.scrollY > 100) {\r\n                setShow(true);\r\n            } else {\r\n                setShow(false);\r\n            }\r\n        };\r\n\r\n        window.addEventListener(\"scroll\", handleShow);\r\n        return () => {\r\n            window.removeEventListener(\"scroll\", handleShow);\r\n        };\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <nav className={`nav ${show && 'nav__black'} `}>\r\n            <img\r\n                className='nav__logo'\r\n                src='https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1920px-Netflix_2015_logo.svg.png'\r\n                alt='Netflix Logo'\r\n            />\r\n            <img\r\n                className='nav__avatar'\r\n                src='https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png?20201013161117'\r\n                alt='Netflix Logo'\r\n            />\r\n        </nav>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\nimport axios from '../../api/axios'\nimport { MovieType } from '../../api/types';\nimport './Row.css';\nimport YouTube, { YouTubeProps } from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\n\n\n\nconst base_url = 'https://image.tmdb.org/t/p/original/'\n\ntype PropsType = {\n  title: string\n  fetchUrl: string\n  isLargeRow?: boolean\n}\n\nconst Row: React.FC<PropsType> = ({ title, fetchUrl, isLargeRow }) => {\n\n  const [movies, setMovies] = useState([] as MovieType[])\n  const [trailerUrl, setTrailerUrl] = useState<string | null>('')\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl)\n      setMovies(request.data.results)\n      return request\n    }\n    fetchData()\n  }, [fetchUrl]);\n\n\n  const opts = {\n    height: '390',\n    width: '100%',\n    playerVars: {\n      autoplay: 1,\n    },\n  }\n\n  const handleClick = async (movie: MovieType) => {\n\n    let movieDate = (movie.first_air_date || movie.release_date)\n    console.log(Number(movieDate.slice(0, 4)))\n    let movieName = movie.original_name || movie.name || movie.title || movie.original_title\n    console.log(movieName)\n\n    if (trailerUrl) {\n      setTrailerUrl('')\n    } else {\n      movieTrailer(movieName)\n        .then((url: any) => {\n          if (!url) {\n            setTrailerUrl('https://www.youtube.com/watch?v=&ab_channel=YouTubeViewers')\n          }\n          const urlParams = new URLSearchParams(new URL(url).search)\n          setTrailerUrl(urlParams.get('v'))\n        })\n        .catch((err: any) => console.log(err))\n    }\n  }\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n      <div className=\"row__posters\" >\n        {\n          movies.map(m => (\n            <img key={m.id}\n              onClick={() => handleClick(m)}\n              className={`row__poster ${isLargeRow && 'row__posterLarge'} `}\n              src={`${base_url}${isLargeRow ? m.poster_path : m.backdrop_path\n                }`}\n              alt={m.name} />\n          ))\n        }\n      </div>\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n    </div>\n  );\n}\n\nexport default Row;\n","import React from 'react';\nimport './App.css';\nimport { Banner } from './Component/Banner/Banner';\nimport { Nav } from './Component/Nav/Nav';\nimport requests from './api/requests';\nimport Row from './Component/Row/Row';\n\n\nfunction App() {\n\n  return (\n    <div className=\"app\">\n      <Nav />\n      <Banner />\n      <Row\n        title=\"NETFLIX ORIGINALS\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow\n      />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}